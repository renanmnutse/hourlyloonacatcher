# -*- coding: utf-8 -*-
"""Cluster hloonacatcher.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Al70vx60UK7hjKjSF4rDHW3NjfJWZhUJ

# Descritores de Imagens via Histograma de Cor

Exemplos baseados em https://github.com/xn2333/OpenCV/blob/master/Seminar_Image_Processing_in_Python.ipynb*

# Instalando Bibliotecas
"""

import numpy as np
import pandas as pd
import cv2 as cv 
#from google.colab.patches import cv2_imshow # for image display
from skimage import io
from PIL import Image 
import matplotlib.pylab as plt
from tqdm import tqdm

def load_zero():
  import os
  path = '/media/pauloricardo/basement/bots/hourlyloonacatcher/'
  dataset = pd.DataFrame(columns=["group", "filename", "post"])
  files_loona, files_deukae = list(os.listdir(path + 'loona/')), list(os.listdir(path + 'deukae/')) 
  color = ('b','g','r')
  dataset_hist_r = np.zeros(((len(files_loona) + len(files_deukae)), 256))
  dataset_hist_g = np.zeros(((len(files_loona) + len(files_deukae)), 256))
  dataset_hist_b = np.zeros(((len(files_loona) + len(files_deukae)), 256))
  for filename in tqdm(files_loona):
    img = cv.imread(path + 'loona/' + filename)
    temp = {"group": 'loona', "filename": filename, "post": False}
    dataset = dataset.append(temp, ignore_index = True)
    dataset = dataset.reset_index(drop=True)
    idx = dataset[dataset["filename"] == filename].index.values.astype(int)[0]
    for i,col in enumerate(color):
      histr = cv.calcHist([img],[i],None,[256],[0,256])
      if col == 'r': dataset_hist_r[idx] = histr.ravel()
      if col == 'g': dataset_hist_g[idx] = histr.ravel()
      if col == 'b': dataset_hist_b[idx] = histr.ravel()
  
  for filename in tqdm(files_deukae):
    img = cv.imread(path + 'deukae/' + filename)
    temp = {"group": 'deukae', "filename": filename, "post": False}
    dataset = dataset.append(temp, ignore_index = True)
    dataset = dataset.reset_index(drop=True)
    idx = dataset[dataset["filename"] == filename].index.values.astype(int)[0]
    for i,col in enumerate(color):
      histr = cv.calcHist([img],[i],None,[256],[0,256])
      if col == 'r': dataset_hist_r[idx] = histr.ravel()
      if col == 'g': dataset_hist_g[idx] = histr.ravel()
      if col == 'b': dataset_hist_b[idx] = histr.ravel()

  # flatten histograms
  X_r = dataset_hist_r
  length = np.sqrt((X_r**2).sum(axis=1))[:,None]
  X_r = X_r / length

  X_g = dataset_hist_g
  length = np.sqrt((X_g**2).sum(axis=1))[:,None]
  X_g = X_g / length

  X_b = dataset_hist_b
  length = np.sqrt((X_b**2).sum(axis=1))[:,None]
  X_b = X_b / length

  X = np.concatenate((X_r,X_g,X_g),axis=1)
  X.shape

  X = X.reshape(X.shape[0],X.shape[1])
  X.shape

  return dataset.to_dict(orient='list'), X

def load_flying():
  import os
  path = '/media/pauloricardo/basement/bots/hourlyloonacatcher/'
  dataset = pd.read_csv('/media/pauloricardo/basement/bots/hourlyloonacatcher_dfs/df_dataset.csv').drop(columns='Unnamed: 0').reset_index(drop=True)
  files_loona, files_deukae = list(os.listdir(path + 'loona/')), list(os.listdir(path + 'deukae/')) 
  color = ('b','g','r')
  dataset_hist_r = np.zeros(((len(files_loona) + len(files_deukae)), 256))
  dataset_hist_g = np.zeros(((len(files_loona) + len(files_deukae)), 256))
  dataset_hist_b = np.zeros(((len(files_loona) + len(files_deukae)), 256))
  for filename in tqdm(files_loona):
    img = cv.imread(path + 'loona/' + filename)
    if img is not None and dataset[dataset["filename"] == filename].shape[0] == 0:
      temp = {"group": 'loona', "filename": filename, "post": False}
      dataset = dataset.append(temp, ignore_index = True)
      dataset = dataset.reset_index(drop=True)
      idx = dataset[dataset["filename"] == filename].index.values.astype(int)[0]
      for i,col in enumerate(color):
        histr = cv.calcHist([img],[i],None,[256],[0,256])
        if col == 'r': dataset_hist_r[idx] = histr.ravel()
        if col == 'g': dataset_hist_g[idx] = histr.ravel()
        if col == 'b': dataset_hist_b[idx] = histr.ravel()
    elif img is not None:
      dataset = dataset.reset_index(drop=True)
      idx = dataset[dataset["filename"] == filename].index.values.astype(int)[0]
      for i,col in enumerate(color):
        histr = cv.calcHist([img],[i],None,[256],[0,256])
        if col == 'r': dataset_hist_r[idx] = histr.ravel()
        if col == 'g': dataset_hist_g[idx] = histr.ravel()
        if col == 'b': dataset_hist_b[idx] = histr.ravel()
  
  for filename in tqdm(files_deukae):
    img = cv.imread(path + 'deukae/' + filename)
    if img is not None and dataset[dataset["filename"] == filename].shape[0] == 0:
      temp = {"group": 'deukae', "filename": filename, "post": False}
      dataset = dataset.append(temp, ignore_index = True)
      dataset = dataset.reset_index(drop=True)
      idx = dataset[dataset["filename"] == filename].index.values.astype(int)[0]
      for i,col in enumerate(color):
        histr = cv.calcHist([img],[i],None,[256],[0,256])
        if col == 'r': dataset_hist_r[idx] = histr.ravel()
        if col == 'g': dataset_hist_g[idx] = histr.ravel()
        if col == 'b': dataset_hist_b[idx] = histr.ravel()
    elif img is not None:
      dataset = dataset.reset_index(drop=True)
      idx = dataset[dataset["filename"] == filename].index.values.astype(int)[0]
      for i,col in enumerate(color):
        histr = cv.calcHist([img],[i],None,[256],[0,256])
        if col == 'r': dataset_hist_r[idx] = histr.ravel()
        if col == 'g': dataset_hist_g[idx] = histr.ravel()
        if col == 'b': dataset_hist_b[idx] = histr.ravel()

  # flatten histograms
  X_r = dataset_hist_r
  length = np.sqrt((X_r**2).sum(axis=1))[:,None]
  length[length == 0] = 1
  X_r = X_r / length
  X_g = dataset_hist_g
  length = np.sqrt((X_g**2).sum(axis=1))[:,None]
  length[length == 0] = 1
  X_g = X_g / length
  X_b = dataset_hist_b
  length = np.sqrt((X_b**2).sum(axis=1))[:,None]
  length[length == 0] = 1
  X_b = X_b / length
  X = np.concatenate((X_r,X_g,X_g),axis=1)
  X.shape
  X = X.reshape(X.shape[0],X.shape[1])
  X.shape

  return dataset.to_dict(orient='list'), X
  
"""# Agrupamento de Imagens"""

from sklearn.cluster import KMeans
import numpy as np

def do_kmeans(X, n_clusters=100):
  kmeans = KMeans(n_clusters=n_clusters).fit(X)
  return kmeans

"""## Escolher a imagem"""

def get_probs(pairs_prob = [100/84] * 84):
    loona = [
      'heejin',
      'hyunjin',
      'haseul',
      'yeojin',
      'vivi',
      'kimlip',
      'jinsoul',
      'choerry',
      'yves',
      'chuu',
      'gowon',
      'oliviahye'
    ]
    deukae = [
        "jiu",
        "sua",
        "siyeon",
        "handong",
        "yoohyeon",
        "dami",
        "gahyeon"
    ]
    
    pairs = []
    for l in loona:
      for d in deukae:
        pairs.append(l + '_' + d)
    return pairs, pairs_prob
    

def update_probs(pairs, pairs_prob, choice):
  for i in range(len(pairs)):
    if pairs[i] not in choice:
      pairs_prob[i] += 100/84
    else:
      pairs_prob[i] = 0
  return pairs_prob

import random 
from sklearn.metrics import silhouette_samples

n_clusters = 50

def first_run():  

  dataset, X = load_zero()
  kmeans = do_kmeans(X, n_clusters) 
  cluster_labels = kmeans.labels_

  sample_silhouette_values = silhouette_samples(X, cluster_labels)

  means_lst = []
  for label in range(n_clusters):
      means_lst.append(sample_silhouette_values[cluster_labels == label].mean())

  clusterList = [x for _,x in sorted(zip(means_lst,range(n_clusters)))]

  imageLoona = None
  imageDeukae = None

  images_to_post = {'loona': [], 'deukae': []}

  # first time

  pairs, pairs_prob = get_probs()
  choice = random.choices(pairs, weights=pairs_prob, k=1) 
  pairs_prob = update_probs(pairs, pairs_prob, choice)
  choice = choice[0].split('_')

  for i in range(168):
    print(choice[0], choice[1]) 
    imageLoona, imageDeukae = -1, -1
    #get image pair for post
    for c in clusterList:
      for image_id, cluster in enumerate(cluster_labels):
        try:
          if not dataset["post"][image_id]:
            if cluster == c:
              if choice[0] in dataset["filename"][image_id]:
                print(image_id)
                imageLoona = image_id
                break
        except:
          continue

      for image_id, cluster in enumerate(cluster_labels):
          try:
            if not dataset["post"][image_id]:
              if cluster == c:
                if choice[1] in dataset["filename"][image_id]:
                  print(image_id)
                  imageDeukae = image_id
                  break
          except:
            continue

      if (imageLoona != -1) and (imageDeukae != -1):
        dataset["post"][imageLoona] = True
        dataset["post"][imageDeukae] = True
        # new pair
        choice = random.choices(pairs, weights=pairs_prob, k=1) 
        pairs_prob = update_probs(pairs, pairs_prob, choice)
        choice = choice[0].split('_')
        # get out and choose right image
        break
    
    if (imageLoona != -1) and (imageDeukae != -1):
      images_to_post['loona'].append(dataset["filename"][imageLoona])
      images_to_post['deukae'].append(dataset["filename"][imageDeukae])
    else:
      print("No more image combinations for the pair")

    #cv2_imshow(dataset["image"][imageLoona])
    #cv2_imshow(dataset["image"][imageDeukae])

  # generate dfs for saving

  df_dataset = pd.DataFrame(dataset)

  df_images_to_post = pd.DataFrame(images_to_post)

  df_pairs = {'pairs': [], 'prob': []}
  df_pairs['pairs'] = pairs
  df_pairs['prob'] = pairs_prob
  df_pairs = pd.DataFrame(df_pairs)

  df_dataset.to_csv('/media/pauloricardo/basement/bots/hourlyloonacatcher_dfs/df_dataset.csv')
  df_images_to_post.to_csv('/media/pauloricardo/basement/bots/hourlyloonacatcher_dfs/images_to_post.csv')
  df_pairs.to_csv('/media/pauloricardo/basement/bots/hourlyloonacatcher_dfs/df_pairs.csv')

def flying_run():  

  dataset, X = load_flying()
  kmeans = do_kmeans(X, n_clusters) 
  cluster_labels = kmeans.labels_

  sample_silhouette_values = silhouette_samples(X, cluster_labels)

  means_lst = []
  for label in range(n_clusters):
      means_lst.append(sample_silhouette_values[cluster_labels == label].mean())

  clusterList = [x for _,x in sorted(zip(means_lst,range(n_clusters)))]

  imageLoona = None
  imageDeukae = None

  images_to_post = pd.read_csv('/media/pauloricardo/basement/bots/hourlyloonacatcher/images_to_post.csv').drop(columns='Unnamed: 0').reset_index().drop(columns='index').to_dict(orient='list')
  df_pairs = pd.read_csv('/media/pauloricardo/basement/bots/hourlyloonacatcher_dfs/df_pairs.csv').drop(columns='Unnamed: 0').reset_index().drop(columns='index')
  pairs, pairs_prob = list(df_pairs['pairs']), list(df_pairs['prob'])
  #pairs, pairs_prob = get_probs()
  
  choice = random.choices(pairs, weights=pairs_prob, k=1) 
  pairs_prob = update_probs(pairs, pairs_prob, choice)
  choice = choice[0].split('_')

  for i in range(168):
    print(choice[0], choice[1])
    imageLoona, imageDeukae = -1, -1
    #get image pair for post
    for c in clusterList:
      for image_id, cluster in enumerate(cluster_labels):
        try:
          if not dataset["post"][image_id]:
            if cluster == c:
              if choice[0] in dataset["filename"][image_id]:
                imageLoona = image_id
                break
        except:
          continue

      for image_id, cluster in enumerate(cluster_labels):
        try:
          if not dataset["post"][image_id]:
            if cluster == c:
              if choice[1] in dataset["filename"][image_id]:
                imageDeukae = image_id
                break
        except:
          continue

      if (imageLoona != -1) and (imageDeukae != -1):
        dataset["post"][imageLoona] = True
        dataset["post"][imageDeukae] = True
        # new pair
        choice = random.choices(pairs, weights=pairs_prob, k=1) 
        pairs_prob = update_probs(pairs, pairs_prob, choice)
        choice = choice[0].split('_')
        # get out and choose right image
        break
    
    if (imageLoona != -1) and (imageDeukae != -1):
      images_to_post['loona'].append(dataset["filename"][imageLoona])
      images_to_post['deukae'].append(dataset["filename"][imageDeukae])
    else:
      print("No more image combinations for the pair")
      # new pair
      choice = random.choices(pairs, weights=pairs_prob, k=1) 
      pairs_prob = update_probs(pairs, pairs_prob, choice)
      choice = choice[0].split('_')

    #cv2_imshow(dataset["image"][imageLoona])
    #cv2_imshow(dataset["image"][imageDeukae])

  # only when images where deleted
  #del dataset['Unnamed: 0.1']
  
  df_dataset = pd.DataFrame(dataset)
  
  df_images_to_post = pd.DataFrame(images_to_post)
  df_images_to_post = df_images_to_post.sample(frac=1).reset_index(drop=True)

  df_pairs = {'pairs': [], 'prob': []}
  df_pairs['pairs'] = pairs
  df_pairs['prob'] = pairs_prob
  df_pairs = pd.DataFrame(df_pairs)
  
  df_dataset.to_csv('/media/pauloricardo/basement/bots/hourlyloonacatcher_dfs/df_dataset.csv')
  df_images_to_post.to_csv('/media/pauloricardo/basement/bots/hourlyloonacatcher_dfs/images_to_post.csv')
  df_pairs.to_csv('/media/pauloricardo/basement/bots/hourlyloonacatcher_dfs/df_pairs.csv')

# when no images pairs were generated previously
#first_run()

# when image pairs are already being posted
flying_run()

df = pd.read_csv('/media/pauloricardo/basement/bots/hourlyloonacatcher_dfs/df_dataset.csv').drop(columns='Unnamed: 0').reset_index().drop(columns='index')

print(len(df[df['post'] == True]))
